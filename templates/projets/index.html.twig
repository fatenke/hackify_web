{# templates/projets/index.html.twig #}
{% extends 'base.html.twig' %}
{% form_theme form 'bootstrap_5_layout.html.twig' %}

{% block title %}D√©tails du projet{% endblock %}

{% block body %}
<section id="modifier-hackathon" class="section">
  <div class="container mt-5">
    <h2 class="mb-4 text-center">D√©tails du projet</h2>

    <div class="row justify-content-center">
      <div class="col-md-8">
        {{ form_start(form, {'attr': {'novalidate': 'novalidate'}}) }}
          <div class="mb-3 position-relative">
            {{ form_label(form.nom) }}
            {{ form_widget(form.nom, {'attr': {'class': 'form-control'~(form.nom.vars.errors|length ? ' is-invalid'), 'id': 'nomInput'}}) }}
            {{ form_errors(form.nom) }}
        </div>
        <div class="mb-3 position-relative">
            {{ form_label(form.description) }}
            {{ form_widget(form.description, {'attr': {'class': 'form-control'~(form.description.vars.errors|length ? ' is-invalid'), 'id': 'descriptionInput'}}) }}
            {{ form_errors(form.description) }}
        </div>
        <div class="mb-3 position-relative">
            {{ form_label(form.ressource) }}
            {{ form_widget(form.ressource, {'attr': {'class': 'form-control'~(form.ressource.vars.errors|length ? ' is-invalid'), 'id': 'ressourceInput'}}) }}
            {{ form_errors(form.ressource) }}
        </div>

          
          
        {{ form_end(form) }}
      </div>
    </div>

    <!-- Boutons de v√©rification et d'enregistrement -->
    <div class="row justify-content-center mb-3">
      <div class="col-md-8 text-center">
        <button type="button" id="verifyBtn" class="btn btn-secondary me-2">V√©rifier Personne</button>
        <button type="submit" id="saveBtn" class="btn btn-primary" disabled>Enregistrer</button>
      </div>
    </div>

    <!-- üöÄ Webcam preview -->
    <div class="row justify-content-center">
      <div class="col-md-6 text-center">
        <video id="video" width="100%" height="300" autoplay muted style="border: 1px solid #ddd; border-radius: 10px;"></video>
        <canvas id="canvas" style="display:none;"></canvas>
      </div>
    </div>
  </div>
</section>

{# üìú Script de gestion de la webcam et de la d√©tection #}
<script src="https://cdn.jsdelivr.net/npm/@vladmandic/face-api/dist/face-api.min.js"></script>
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.3/css/all.min.css">

<script>
document.addEventListener('DOMContentLoaded', async function() {
    const video = document.getElementById('video');
    const saveBtn = document.getElementById('saveBtn');
    const verifyBtn = document.getElementById('verifyBtn');
    const canvas = document.getElementById('canvas');
    const context = canvas.getContext('2d');

    // Cacher la vid√©o et le canvas
    video.style.display = 'none';
    canvas.style.display = 'none';

    // Charger les mod√®les de reconnaissance faciale
    async function loadFaceDetectionModel() {
        try {
            const MODEL_URL = 'https://cdn.jsdelivr.net/npm/@vladmandic/face-api/model/';
            await faceapi.nets.tinyFaceDetector.loadFromUri(MODEL_URL);
            await faceapi.nets.faceLandmark68Net.loadFromUri(MODEL_URL);
            console.log('Mod√®les de d√©tection faciale charg√©s');
        } catch (error) {
            console.error('Erreur lors du chargement des mod√®les', error);
            alert('Impossible de charger les mod√®les de reconnaissance faciale.');
        }
    }

    // D√©marrage de la cam√©ra
    async function startCamera() {
        try {
            const stream = await navigator.mediaDevices.getUserMedia({ video: true });
            video.srcObject = stream;
            video.style.display = 'block';
            
            return new Promise((resolve) => {
                video.onloadedmetadata = () => {
                    video.play();
                    resolve();
                };
            });
        } catch (error) {
            console.error('Erreur acc√®s cam√©ra:', error);
            alert('Impossible d\'acc√©der √† la cam√©ra. V√©rifiez les permissions.');
            throw error;
        }
    }

    // V√©rification de la personne
    async function verifyPerson() {
        try {
            // Capture de l'√©cran
            canvas.width = video.videoWidth;
            canvas.height = video.videoHeight;
            context.drawImage(video, 0, 0, canvas.width, canvas.height);
            canvas.style.display = 'block';

            // D√©tecter les visages
            const detections = await faceapi.detectAllFaces(canvas, new faceapi.TinyFaceDetectorOptions())
                .withFaceLandmarks();

            console.log('D√©tections de visage:', detections);

            // V√©rifier la pr√©sence et la qualit√© du visage
            if (detections.length === 1) {
                const landmarks = detections[0].landmarks;
                const confidence = landmarks.positions.length;

                // Crit√®res de v√©rification
                if (confidence > 60) {
                    console.log('Personne r√©elle d√©tect√©e');
                    return true;
                }
            }

            console.log('Aucune personne valide d√©tect√©e');
            return false;
        } catch (error) {
            console.error('Erreur lors de la v√©rification', error);
            throw error;
        }
    }

    // Initialiser les mod√®les
    await loadFaceDetectionModel();

    // Bouton V√©rifier
    verifyBtn.addEventListener('click', async function(event) {
        event.preventDefault();
        console.log('Bouton V√©rifier cliqu√©');
        
        try {
            // D√©marrer la cam√©ra
            await startCamera();

            // Attendre un moment pour stabiliser la vid√©o
            await new Promise(resolve => setTimeout(resolve, 2000));

            // V√©rifier la personne
            const personVerified = await verifyPerson();

            if (personVerified) {
                saveBtn.disabled = false;
                saveBtn.classList.remove('btn-primary');
                saveBtn.classList.add('btn-success');
                alert('Personne v√©rifi√©e avec succ√®s. Vous pouvez maintenant vous enregistrer.');
            } else {
                saveBtn.disabled = true;
                saveBtn.classList.remove('btn-success');
                saveBtn.classList.add('btn-primary');
                alert('V√©rification √©chou√©e. Assurez-vous d\'avoir un visage bien visible.');
            }
        } catch (error) {
            console.error('Erreur lors de la v√©rification', error);
            alert('Une erreur est survenue lors de la v√©rification.');
        }
    });

    // Soumettre le formulaire lorsque le bouton Enregistrer est cliqu√©
    saveBtn.addEventListener('click', function(event) {
        event.preventDefault();
        const form = document.querySelector('form');
        if (!saveBtn.disabled) {
            form.submit();
        }
    });
});
</script>

</script>
</script>




{% endblock %}
