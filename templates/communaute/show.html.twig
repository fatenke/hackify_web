{% extends 'base.html.twig' %}

{% block title %}Community: {{ communaute.nom }}{% endblock %}

{% block stylesheets %}
    {{ parent() }}
    <style>
        /* Existing styles unchanged */
        .community-banner {
            background-color: #13071d;
            color: #ffffff;
            padding: 2rem 0;
            margin-bottom: 2rem;
        }
        .welcome-title {
            color: #e9c7ff;
            font-weight: 400;
            margin-bottom: 0.5rem;
            font-size: 1.8rem;
        }
        .hackathon-title {
            color: #a388c5;
            font-weight: 300;
            margin-bottom: 1rem;
            font-size: 1.4rem;
        }
        .countdown-title {
            color: #a388c5;
            font-weight: 600;
            font-size: 1.2rem;
            margin-bottom: 1rem;
        }
        .countdown-status {
            display: inline-block;
            font-size: 0.9rem;
            padding: 0.25rem 0.75rem;
            border-radius: 50px;
            font-weight: 500;
            margin-bottom: 1rem;
        }
        .status-active {
            background-color: rgba(16, 142, 233, 0.2);
            color: #40a9ff;
        }
        .status-ending {
            background-color: rgba(250, 173, 20, 0.2);
            color: #faad14;
        }
        .status-ended {
            background-color: rgba(245, 34, 45, 0.2);
            color: #ff4d4f;
        }
        .date-info {
            margin-bottom: 1.5rem;
        }
        .date-label {
            color: #a388c5;
            font-size: 0.85rem;
            display: block;
        }
        .date-value {
            color: #e9c7ff;
            font-size: 1rem;
            display: block;
            margin-bottom: 0.5rem;
        }
        .countdown-grid {
            display: grid;
            grid-auto-flow: column;
            grid-auto-columns: max-content;
            gap: 1rem;
            text-align: center;
            margin-bottom: 1.5rem;
        }
        .countdown-box {
            display: flex;
            flex-direction: column;
            padding: 1rem 1.5rem;
            background-color: rgba(0, 0, 0, 0.5);
            border-radius: 8px;
            color: white;
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.3);
            min-width: 90px;
            border: 1px solid rgba(255, 255, 255, 0.1);
        }
        .countdown-value {
            font-family: monospace;
            font-size: 2.8rem;
            line-height: 1;
            font-weight: 700;
            color: #40a9ff;
            min-width: 3ch;
            text-align: center;
            text-shadow: 0 2px 4px rgba(0, 0, 0, 0.3);
        }
        .time-critical .countdown-value {
            color: #ff4d4f;
        }
        .countdown-label {
            font-size: 0.85rem;
            color: #a388c5;
            margin-top: 0.5rem;
        }
        .countdown-progress {
            height: 4px;
            border-radius: 2px;
            overflow: hidden;
            background-color: rgba(255, 255, 255, 0.1);
            margin-top: 1rem;
        }
        .countdown-progress-bar {
            height: 100%;
            background-color: #40a9ff;
            transition: width 0.6s ease;
        }
        .time-critical .countdown-progress-bar {
            background-color: #ff4d4f;
        }
        .submission-alert {
            background-color: rgba(245, 34, 45, 0.15);
            color: #ff4d4f;
            border: 1px solid rgba(245, 34, 45, 0.3);
            border-radius: 4px;
            padding: 1rem;
            margin-bottom: 1.5rem;
            display: flex;
            align-items: center;
            gap: 1rem;
        }
        .submission-alert i {
            font-size: 1.5rem;
        }
        .submission-alert-content {
            flex: 1;
        }
        .submission-alert-title {
            font-weight: 600;
            margin-bottom: 0.25rem;
            font-size: 1.1rem;
        }
        .submission-alert .btn-danger {
            background-color: #ff4d4f;
            border-color: #ff4d4f;
        }
        .submission-alert .btn-danger:hover {
            background-color: #ff7875;
            border-color: #ff7875;
        }
        .message-content {
            max-width: 75%;
            display: inline-block;
        }
        .messages {
            display: flex;
            flex-direction: column;
            gap: 1rem;
        }
        .chat-container {
            height: calc(100vh - 100px);
            overflow-y: auto;
        }
        .poll-card {
            border: 1px solid #e0e0e0;
            border-radius: 8px;
            margin-bottom: 1rem;
        }
        .progress {
            background-color: #e9ecef;
            border-radius: 0.25rem;
        }
        .progress-bar {
            background-color: #007bff;
            color: white;
            text-align: center;
            font-size: 0.875rem;
            line-height: 20px;
            white-space: nowrap;
        }
        .badge-active {
            background-color: #28a745;
            color: white;
        }
        .badge-closed {
            background-color: #6c757d;
            color: white;
        }
        .polls-sidebar {
            position: fixed;
            right: 0;
            top: 0;
            height: 100vh;
            width: 300px;
            background: white;
            box-shadow: -2px 0 5px rgba(0,0,0,0.1);
            transform: translateX(100%);
            transition: transform 0.3s ease;
            z-index: 1000;
            padding: 1rem;
            overflow-y: auto;
        }
        .polls-sidebar.show {
            transform: translateX(0);
        }
        .toggle-polls {
            position: fixed;
            right: 20px;
            bottom: 20px;
            z-index: 1001;
        }
        .message {
            margin-bottom: 15px;
            max-width: 75%;
        }
        .message-own {
            margin-left: auto;
            margin-right: 0;
            background-color: #f1f1f1;
            color: black;
            border-radius: 15px 15px 15px 0;
            padding: 10px 15px;
            box-shadow: 0 2px 5px rgba(0,0,0,0.05);
            border-right: 3px solid #d9d9d9;
        }
        .message-own .text-muted {
            color: rgba(0, 0, 0, 0.6) !important;
        }
        .message-other {
            margin-right: auto;
            margin-left: 0;
            background-color: #007bff;
            color: white;
            border-radius: 15px 15px 0 15px;
            padding: 10px 15px;
        }
        .message-other .text-muted {
            color: rgba(255, 255, 255, 0.7) !important;
        }
        .message-bot {
            margin-right: auto;
            margin-left: 0;
            background-color: #0a5c36;
            color: white;
            border-radius: 15px 15px 0 15px;
            padding: 15px 20px;
            max-width: 85%;
            box-shadow: 0 2px 5px rgba(0,0,0,0.1);
            border-left: 4px solid #28a745;
        }
        .message-bot .text-muted {
            color: rgba(255, 255, 255, 0.7) !important;
            font-size: 0.8rem;
            margin-top: 8px;
            display: block;
            text-align: right;
        }
        .bot-response-content {
            line-height: 1.5;
            font-size: 1rem;
        }
        .bot-response-content strong {
            display: block;
            margin-top: 10px;
            margin-bottom: 5px;
            font-size: 1.1rem;
            color: #e9ff9e;
            border-bottom: 1px solid rgba(255,255,255,0.2);
            padding-bottom: 3px;
        }
        .bot-response-content em {
            color: #ffeb99;
            font-style: italic;
        }
        .bot-response-content code {
            background-color: rgba(0,0,0,0.2);
            padding: 2px 5px;
            border-radius: 3px;
            font-family: monospace;
            color: #f8f9fa;
        }
        .option-input-group {
            display: flex;
            align-items: center;
        }
        .remove-option-btn {
            margin-left: 10px;
            color: #dc3545;
            cursor: pointer;
        }
        .search-container {
            background-color: #f8f9fa;
            border-radius: 0.75rem;
            padding: 1.25rem;
            margin-bottom: 1rem;
            box-shadow: 0 4px 6px rgba(0,0,0,0.05);
        }
        .search-form {
            display: flex;
            gap: 0.5rem;
            transition: all 0.3s ease;
        }
        .search-form:focus-within {
            transform: translateY(-2px);
            box-shadow: 0 4px 8px rgba(0,0,0,0.1);
        }
        .search-form .input-group {
            width: 100%;
            border-radius: 30px;
            overflow: hidden;
            box-shadow: 0 2px 5px rgba(0,0,0,0.1);
            transition: all 0.3s ease;
        }
        .search-form:focus-within .input-group {
            box-shadow: 0 4px 8px rgba(0,0,0,0.15);
        }
        .search-form .form-control {
            border-radius: 30px 0 0 30px;
            padding-left: 20px;
            border: none;
            height: 45px;
            transition: all 0.3s ease;
        }
        .search-form .form-control:focus {
            border-color: transparent;
            box-shadow: none;
        }
        .search-form .btn {
            border-radius: 0 30px 30px 0;
            padding: 0.5rem 1.25rem;
            transition: all 0.3s ease;
            background: linear-gradient(135deg, #0062cc 0%, #007bff 100%);
            border: none;
        }
        .search-form .btn:hover {
            transform: scale(1.05);
            background: linear-gradient(135deg, #007bff 0%, #0062cc 100%);
            box-shadow: 0 2px 10px rgba(0,123,255,0.3);
        }
        .search-form .btn i {
            margin-right: 5px;
            transition: all 0.3s ease;
        }
        .search-form .btn:hover i {
            animation: bounce 0.5s ease infinite;
        }
        @keyframes bounce {
            0%, 100% {
                transform: translateY(0);
            }
            50% {
                transform: translateY(-3px);
            }
        }
        .search-results {
            max-height: 400px;
            overflow-y: auto;
            display: none;
            background-color: white;
            border-radius: 0.75rem;
            padding: 0.5rem;
            margin-top: 1rem;
            box-shadow: 0 4px 12px rgba(0,0,0,0.1);
            animation: slideDown 0.3s ease;
        }
        @keyframes slideDown {
            from {
                opacity: 0;
                transform: translateY(-10px);
            }
            to {
                opacity: 1;
                transform: translateY(0);
            }
        }
        .search-results.show {
            display: block;
        }
        .message-card {
            background-color: white;
            border-left: 4px solid #007bff;
            border-radius: 0.5rem;
            padding: 1rem;
            margin-bottom: 0.75rem;
            transition: all 0.3s ease;
            animation: fadeIn 0.5s ease;
            position: relative;
            overflow: hidden;
        }
        @keyframes fadeIn {
            from { opacity: 0; }
            to { opacity: 1; }
        }
        .message-card:hover {
            transform: translateY(-3px);
            box-shadow: 0 4px 12px rgba(0,0,0,0.15);
        }
        .message-card::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: linear-gradient(135deg, rgba(0,123,255,0.1) 0%, rgba(255,255,255,0) 100%);
            pointer-events: none;
        }
        .message-meta {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 0.75rem;
            border-bottom: 1px solid #f0f0f0;
            padding-bottom: 0.5rem;
        }
        .message-author {
            font-weight: bold;
            color: #333;
            font-size: 0.95rem;
        }
        .message-date {
            color: #6c757d;
            font-size: 0.75rem;
        }
        .message-chat {
            background-color: #f8f9fa;
            border-radius: 12px;
            padding: 0.35rem 0.7rem;
            font-size: 0.75rem;
            margin-bottom: 0.75rem;
            display: inline-block;
        }
        .message-content {
            line-height: 1.5;
            margin-bottom: 0.75rem;
        }
        .highlight {
            background-color: #ffffa3;
            padding: 0.15rem 0.3rem;
            border-radius: 0.2rem;
            font-weight: 500;
            box-shadow: 0 1px 2px rgba(0,0,0,0.1);
        }
        .view-message-btn {
            border-radius: 20px;
            font-size: 0.85rem;
            padding: 0.25rem 0.85rem;
            transition: all 0.3s ease;
        }
        .view-message-btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 2px 5px rgba(0,0,0,0.2);
        }
        .search-loading {
            animation: fadeIn 0.5s ease;
        }
        .spinner {
            margin: 0 auto;
            width: 70px;
            text-align: center;
        }
        .spinner > div {
            width: 18px;
            height: 18px;
            background-color: #007bff;
            border-radius: 100%;
            display: inline-block;
            animation: sk-bouncedelay 1.4s infinite ease-in-out both;
            margin: 0 3px;
        }
        .spinner .bounce1 {
            animation-delay: -0.32s;
            background-color: #0062cc;
        }
        .spinner .bounce2 {
            animation-delay: -0.16s;
            background-color: #007bff;
        }
        .spinner .bounce3 {
            background-color: #3498db;
        }
        @keyframes sk-bouncedelay {
            0%, 80%, 100% {strategies { 
                transform: scale(0);
            } 
            40% { 
                transform: scale(1.0);
            }
        }
        .countdown-container {
            display: flex;
            justify-content: center;
            gap: 1rem;
            margin: 2rem 0;
        }
        .countdown-item {
            background-color: #343a40;
            color: #dee2e6;
            border-radius: 0.5rem;
            padding: 1rem;
            text-align: center;
            min-width: 80px;
            box-shadow: 0 2px 4px rgba(0,0,0,0.2);
        }
        .countdown-number {
            font-family: monospace;
            font-size: 2.5rem;
            display: block;
            transition: opacity 0.3s ease;
            font-weight: bold;
            color: #fff;
        }
        .countdown-label {
            font-size: 0.875rem;
            color: #adb5bd;
            margin-top: 0.5rem;
            text-transform: uppercase;
        }
        .countdown-finished .countdown-item {
            background-color: #dc3545;
        }
        .countdown-title {
            text-align: center;
            margin-bottom: 1rem;
            color: #495057;
        }
        .countdown-end-date {
            text-align: center;
            color: #6c757d;
            font-size: 0.875rem;
            margin-top: 0.5rem;
        }
        #hackathon-countdown {
            background: rgba(255, 255, 255, 0.1);
            border-radius: 8px;
            padding: 1.5rem;
            margin-bottom: 1.5rem;
        }
        #hackathon-countdown .countdown-box {
            text-align: center;
            background: rgba(0, 0, 0, 0.2);
            padding: 0.75rem;
            border-radius: 6px;
            margin: 0.5rem;
        }
        #hackathon-countdown .h2 {
            color: #fff;
            font-size: 2rem;
            font-weight: 700;
            margin: 0;
            line-height: 1;
        }
        #hackathon-countdown small {
            color: rgba(255, 255, 255, 0.7);
            font-size: 0.875rem;
        }
        #hackathon-countdown.warning {
            background: rgba(220

, 53, 69, 0.2);
            border: 1px solid rgba(220, 53, 69, 0.3);
        }
        #hackathon-countdown.warning .countdown-box {
            background: rgba(220, 53, 69, 0.3);
        }
        #hackathon-countdown.warning .h2 {
            color: #ff6b6b;
        }
        .submission-reminder {
            display: none;
            background: #dc3545;
            color: white;
            padding: 1rem;
            border-radius: 6px;
            margin-top: 1rem;
            text-align: center;
            animation: pulse 2s infinite;
        }
        .submission-reminder.show {
            display: block;
        }
        .submission-reminder a {
            color: white;
            text-decoration: underline;
            font-weight: bold;
        }
        .submission-reminder a:hover {
            color: rgba(255, 255, 255, 0.9);
        }
        @keyframes pulse {
            0% {
                transform: scale(1);
            }
            50% {
                transform: scale(1.02);
            }
            100% {
                transform: scale(1);
            }
        }
        
        /* Remove all these conflicting message styles */
        .message-content {
            line-height: 1.5;
            margin-bottom: 0.75rem;
        }
        .messages {
            display: flex;
            flex-direction: column;
            gap: 1rem;
        }
        .chat-container {
            height: calc(100vh - 100px);
            overflow-y: auto;
        }
        /* Remove all old message styles */
        
        /* BEGIN CLEAN CHAT STYLING - COMPLETELY REIMPLEMENTED */
        /* Main messages container */
        #messages-container {
            display: flex;
            flex-direction: column;
            gap: 20px;
            padding: 20px;
            max-height: 600px;
            overflow-y: auto;
            background-color: #f5f7fb;
            border-radius: 8px;
            box-shadow: inset 0 0 10px rgba(0,0,0,0.05);
        }
        
        /* Base message style */
        #messages-container .message {
            display: flex;
            max-width: 80%;
            gap: 12px;
            position: relative;
            margin-bottom: 0;
        }
        
        /* User's own messages */
        #messages-container .message-own {
            align-self: flex-end;
            flex-direction: row-reverse;
            margin-left: auto;
        }
        
        /* Other user's messages and bot messages */
        #messages-container .message-other,
        #messages-container .message-bot {
            align-self: flex-start;
            margin-right: auto;
        }
        
        /* Avatar styling */
        #messages-container .avatar-container {
            width: 40px;
            height: 40px;
            border-radius: 50%;
            overflow: hidden;
            flex-shrink: 0;
            align-self: flex-end;
            box-shadow: 0 2px 6px rgba(0,0,0,0.2);
            border: 3px solid #fff;
        }
        
        #messages-container .message-own .avatar-container {
            border-color: #0d6efd;
        }
        
        #messages-container .message-bot .avatar-container {
            border-color: #0a5c36;
        }
        
        #messages-container .avatar-container img {
            width: 100%;
            height: 100%;
            object-fit: cover;
        }
        
        #messages-container .avatar-placeholder {
            width: 100%;
            height: 100%;
            display: flex;
            align-items: center;
            justify-content: center;
            background-color: #6c757d;
            color: white;
            font-weight: bold;
            font-size: 16px;
        }
        
        #messages-container .message-own .avatar-placeholder {
            background-color: #0d6efd;
        }
        
        #messages-container .bot-avatar {
            background: linear-gradient(135deg, #0a5c36 0%, #28a745 100%);
        }
        
        /* Message content wrapper */
        #messages-container .message-wrapper {
            display: flex;
            flex-direction: column;
            max-width: calc(100% - 60px);
        }
        
        /* Message content styling */
        #messages-container .message-content {
            padding: 12px 16px;
            border-radius: 18px;
            box-shadow: 0 1px 3px rgba(0,0,0,0.1);
            position: relative;
            word-break: break-word;
            line-height: 1.5;
        }
        
        #messages-container .message-own .message-content {
            background-color: #0d6efd;
            color: white;
            border-top-right-radius: 4px;
            margin-right: 8px;
        }
        
        #messages-container .message-other .message-content {
            background-color: white;
            color: #212529;
            border-top-left-radius: 4px;
            margin-left: 8px;
        }
        
        #messages-container .message-bot .message-content {
            background-color: #0a5c36;
            color: white;
            border-top-left-radius: 4px;
            margin-left: 8px;
        }
        
        /* Message metadata */
        #messages-container .message-meta {
            display: flex;
            flex-direction: column;
            margin-bottom: 5px;
        }
        
        #messages-container .message-own .message-meta {
            align-items: flex-end;
        }
        
        #messages-container .message-sender {
            font-weight: 600;
            font-size: 13px;
            margin-bottom: 2px;
        }
        
        #messages-container .message-own .message-sender {
            display: none;
        }
        
        #messages-container .message-time {
            font-size: 11px;
            color: rgba(0, 0, 0, 0.5);
            margin-top: 4px;
        }
        
        #messages-container .message-own .message-time {
            color: rgba(255, 255, 255, 0.7);
        }
        
        #messages-container .message-bot .message-time {
            color: rgba(255, 255, 255, 0.7);
        }
        
        /* Bot message specific styling */
        #messages-container .bot-response-content {
            line-height: 1.5;
            font-size: 1rem;
        }
        
        #messages-container .bot-response-content strong {
            display: block;
            margin-top: 10px;
            margin-bottom: 5px;
            font-size: 1.1rem;
            color: #e9ff9e;
            border-bottom: 1px solid rgba(255,255,255,0.2);
            padding-bottom: 3px;
        }
        
        #messages-container .bot-response-content em {
            color: #ffeb99;
            font-style: italic;
        }
        
        #messages-container .bot-response-content code {
            background-color: rgba(0,0,0,0.2);
            padding: 2px 5px;
            border-radius: 3px;
            font-family: monospace;
            color: #f8f9fa;
        }
        
        #messages-container .bot-response-content br {
            display: block;
            content: "";
            margin-top: 5px;
        }
        /* END CLEAN CHAT STYLING */

        /* Mention feature styling */
        .mention-container {
            position: absolute;
            background: white;
            border: 1px solid #ccc;
            border-radius: 5px;
            max-height: 200px;
            overflow-y: auto;
            width: 250px;
            z-index: 9999;
            display: none;
            box-shadow: 0 4px 8px rgba(0,0,0,0.2);
        }
        
        .mention-container.show {
            display: block !important;
            animation: fadeIn 0.2s ease;
        }
        
        .mention-item {
            padding: 8px 12px;
            cursor: pointer;
            display: flex;
            align-items: center;
            gap: 10px;
            transition: background-color 0.2s ease;
        }
        
        .mention-item:hover, .mention-item.active {
            background-color: #f0f7ff;
        }
        
        .mention-avatar {
            width: 28px;
            height: 28px;
            border-radius: 50%;
            background-color: #6c757d;
            color: white;
            display: flex;
            align-items: center;
            justify-content: center;
            font-weight: bold;
            font-size: 12px;
        }
        
        .mention-info {
            flex: 1;
        }
        
        .mention-name {
            font-weight: 500;
            color: #212529;
            font-size: 14px;
            line-height: 1.2;
        }
        
        .mention-email {
            font-size: 12px;
            color: #6c757d;
        }
        
        .mention-text {
            color: #0d6efd;
            font-weight: 500;
        }
        
        .mention-highlight {
            background-color: rgba(13, 110, 253, 0.1);
            border-radius: 3px;
            padding: 1px 4px;
            margin: 0 1px;
        }

        /* Reaction styling */
        .message-reactions {
            margin-top: 5px;
        }
        
        .reaction-buttons {
            display: flex;
            gap: 4px;
        }
        
        .reaction-button {
            background: none;
            border: 1px solid #ccc;
            border-radius: 12px;
            padding: 2px 6px;
            font-size: 14px;
            cursor: pointer;
            transition: all 0.2s ease;
            display: inline-flex;
            align-items: center;
        }
        
        .reaction-button:hover {
            background-color: #f0f0f0;
        }
        
        .reaction-button.active {
            background-color: #e0f0ff;
            border-color: #a0c0f0;
        }
        
        .reaction-counter {
            font-size: 12px;
            margin-left: 3px;
            font-weight: 500;
            min-width: 10px;
        }
    </style>
{% endblock %}

{% block body %}
    <div class="container-fluid mt-4">
        <div class="row">
            <!-- Left Sidebar -->
            <div class="col-md-3">
                <!-- Hackathon Countdown -->
                <div class="card mb-4">
                    <div class="card-header">
                        <h3 class="h4 mb-0">{{ communaute.nom }}</h3>
                    </div>
                    <div class="card-body bg-dark text-white">
                        <!-- Simplified Countdown -->
                        <div id="hackathon-countdown">
                            <h5 class="text-center mb-3">Time Until Hackathon Ends</h5>
                            <div class="d-flex justify-content-center gap-3">
                                <div class="countdown-box">
                                    <div id="days" class="h2 mb-0">00</div>
                                    <small>Days</small>
                                </div>
                                <div class="countdown-box">
                                    <div id="hours" class="h2 mb-0">00</div>
                                    <small>Hours</small>
                                </div>
                                <div class="countdown-box">
                                    <div id="minutes" class="h2 mb-0">00</div>
                                    <small>Minutes</small>
                                </div>
                                <div class="countdown-box">
                                    <div id="seconds" class="h2 mb-0">00</div>
                                    <small>Seconds</small>
                                </div>
                            </div>
                            <div class="text-center mt-2">
                                <small class="text-muted">Ends: {{ communaute.id_hackathon.date_fin|date('M d, Y H:i') }}</small>
                            </div>
                            <div id="submission-reminder" class="submission-reminder">
                                <i class="fas fa-exclamation-triangle me-2"></i>
                                Less than 24 hours remaining!<br>
                                <a href="#" class="mt-2 d-inline-block">Submit Your Project Now</a>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Search Box -->
                <div class="card mb-4">
                    <div class="card-header bg-primary text-white">
                        <h4 class="h5 mb-0"><i class="fas fa-search"></i> Search Messages</h4>
                    </div>
                    <div class="card-body search-container">
                        <form id="message-search-form" class="search-form">
                            <div class="input-group">
                                <input type="text" id="search-query" class="form-control" placeholder="Search messages...">
                                <button type="submit" class="btn btn-primary">
                                    <i class="fas fa-search"></i> Search
                                </button>
                            </div>
                        </form>
                        <div id="search-results" class="search-results mt-3">
                            <!-- Search results will appear here -->
                        </div>
                    </div>
                </div>

                <!-- Available Chats -->
                <div class="card">
                    <div class="card-header">
                        <h4 class="h5 mb-0">Available Chats</h4>
                    </div>
                    <div class="list-group list-group-flush">
                        {% for chat in communaute.chats %}
                            <a href="#" class="list-group-item list-group-item-action d-flex justify-content-between align-items-center chat-link" 
                               data-chat-id="{{ chat.id }}"
                               data-chat-name="{{ chat.nom }}"
                               data-chat-type="{{ chat.type }}">
                                {{ chat.nom }}
                                <span class="badge bg-primary rounded-pill">{{ chat.type }}</span>
                            </a>
                        {% endfor %}
                    </div>
                </div>
                
                <div class="mt-3">
                    <a href="{{ path('app_communaute_index') }}" class="btn btn-secondary w-100">Back to Communities</a>
                </div>
            </div>

            <!-- Chat Area -->
            <div class="col-md-9">
                <div id="chat-container" class="card">
                    <div class="card-header bg-primary text-white d-flex justify-content-between align-items-center">
                        <h4 class="mb-0" id="current-chat-name">Select a chat to start</h4>
                        <button type="button" class="btn btn-light btn-sm" data-bs-toggle="modal" data-bs-target="#createPollModal" id="create-poll-btn" style="display: none;">
                            <i class="fas fa-poll"></i> Create Poll
                        </button>
                    </div>
                    <div class="card-body">
                        <div id="messages-container" style="max-height: 600px; overflow-y: auto;">
                            <p class="text-center text-muted">Select a chat from the list to view messages</p>
                        </div>

                        <form id="message-form" class="mt-3 d-none">
                            <input type="hidden" name="_token" value="{{ csrf_token('message_token') }}">
                            <div class="form-group position-relative">
                                <textarea class="form-control" name="contenu" id="message-input" rows="2" placeholder="Type your message... Use @ to mention someone" required></textarea>
                                <div id="mention-container" class="mention-container"></div>
                            </div>
                            <div class="form-group mt-2">
                                <select class="form-control" name="type">
                                    <option value="QUESTION">Question</option>
                                    <option value="REPONSE">Response</option>
                                    <option value="SUGGESTION">Suggestion</option>
                                </select>
                            </div>
                            <button type="submit" class="btn btn-primary mt-2">Send Message</button>
                        </form>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Polls Sidebar -->
    <div class="polls-sidebar" id="polls-sidebar">
        <div class="d-flex justify-content-between align-items-center mb-3">
            <h5 class="card-title mb-0">Polls</h5>
            <button type="button" class="btn btn-success btn-sm" data-bs-toggle="modal" data-bs-target="#createPollModal">
                <i class="fas fa-plus"></i> New Poll
            </button>
        </div>
        <div id="polls-container">
            <!-- Polls will be loaded here dynamically -->
        </div>
    </div>

    <!-- Toggle Polls Button -->
    <button class="btn btn-primary toggle-polls" id="toggle-polls">
        <i class="fas fa-poll"></i>
    </button>

    <!-- Create Poll Modal -->
    <div class="modal fade" id="createPollModal" tabindex="-1" aria-labelledby="createPollModalLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="createPollModalLabel">Create New Poll</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <form id="create-poll-form">
                    <input type="hidden" name="_token" value="{{ csrf_token('poll_token') }}">
                    <div class="modal-body">
                        <div class="mb-3">
                            <label for="question" class="form-label">Poll Question</label>
                            <input type="text" class="form-control" id="question" name="question" required>
                        </div>
                        <div id="pollOptions" class="mb-3">
                            <div class="mb-2 option-input-group">
                                <div class="flex-grow-1">
                                    <label class="form-label">Option 1</label>
                                    <input type="text" class="form-control" name="options[]" required>
                                </div>
                            </div>
                            <div class="mb-2 option-input-group">
                                <div class="flex-grow-1">
                                    <label class="form-label">Option 2</label>
                                    <input type="text" class="form-control" name="options[]" required>
                                </div>
                            </div>
                        </div>
                        <button type="button" class="btn btn-secondary btn-sm" onclick="addOption()">
                            <i class="fas fa-plus"></i> Add Option
                        </button>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                        <button type="submit" class="btn btn-primary">Create Poll</button>
                    </div>
                </form>
            </div>
        </div>
    </div>

   <!-- Only showing the updated JavaScript section -->
<script>
    // Enhanced debug log function
    function debugLog(message, data = null) {
        try {
            if (data !== null) {
                console.log(message, data);
            } else {
                console.log(message);
            }
        } catch (e) {
            // Handle console errors in older browsers
            console.error("Debug logging error:", e);
        }
    }
    
    // Global error handler for better debugging
    window.addEventListener('error', function(event) {
        debugLog('JavaScript error:', {
            message: event.message,
            source: event.filename,
            lineNo: event.lineno,
            colNo: event.colno,
            error: event.error
        });
    });
    
    // Initialize key variables
    let currentChatId = null;
    let currentUserId = {{ app.user ? app.user.id : 'null' }};
    let communauteId = {{ communaute.id }};
    let communityMembers = [];
    
    // Initialize variables for mentions
    let mentionContainer = null;
    let messageTextarea = null;
    let mentionActive = false;
    let mentionStartIndex = -1;
    let mentionSearchText = '';
    let mentionSelectedIndex = -1;
    
    // Function to fetch community members
    function fetchCommunityMembers() {
        const apiUrl = `/chat/community/${communauteId}/members`;
        debugLog('Fetching community members from:', apiUrl);
        
        fetch(apiUrl)
            .then(response => {
                debugLog('API response status:', response.status);
                if (!response.ok) {
                    throw new Error('Failed to load community members');
                }
                return response.json();
            })
            .then(data => {
                debugLog('Community members loaded:', data);
                communityMembers = data.members || [];
            })
            .catch(error => {
                debugLog('Error loading community members:', error);
                // Fallback: Use test data if API fails
                debugLog('Using fallback test data for members');
                communityMembers = [
                    {
                        id: 1, 
                        name: 'John Doe',
                        email: 'john@example.com',
                        role: 'ADMIN'
                    },
                    {
                        id: 2,
                        name: 'Jane Smith',
                        email: 'jane@example.com',
                        role: 'ORGANISATEUR'
                    },
                    {
                        id: 3,
                        name: 'Alice Johnson',
                        email: 'alice@example.com',
                        role: 'COACH'
                    },
                    {
                        id: 4,
                        name: 'Bob Brown',
                        email: 'bob@example.com',
                        role: 'PARTICIPANT'
                    },
                    {
                        id: 5,
                        name: 'Charlie Davis',
                        email: 'charlie@example.com',
                        role: 'PARTICIPANT'
                    }
                ];
            });
    }
    
    // Function to initialize/reinitialize the message form
    function initializeMessageForm() {
        // Get the message textarea
        messageTextarea = document.getElementById('message-input');
        
        if (!messageTextarea) {
            debugLog('ERROR: Message textarea not found');
            return;
        }
        
        debugLog('Setting up mention handlers on textarea');
        
        // Make sure we have the mention container
        mentionContainer = document.getElementById('mention-container');
        if (!mentionContainer) {
            debugLog('Creating mention container');
            mentionContainer = document.createElement('div');
            mentionContainer.id = 'mention-container';
            mentionContainer.className = 'mention-container';
            document.body.appendChild(mentionContainer);
        }
        
        // Remove any existing listeners to avoid duplicates
        messageTextarea.removeEventListener('keyup', handleMentionKeyup);
        messageTextarea.removeEventListener('keydown', handleMentionKeydown);
        
        // Add event listeners
        messageTextarea.addEventListener('keyup', handleMentionKeyup);
        messageTextarea.addEventListener('keydown', handleMentionKeydown);
    }
    
    // Call this when the page loads
    document.addEventListener('DOMContentLoaded', function() {
        debugLog('Setting up mentions and reactions functionality for community ID:', communauteId);
        
        // Fetch community members right away
        fetchCommunityMembers();
        
        // Set up reaction handling
        setupReactions();
        
        // Initialize message form if available
        initializeMessageForm();

        // Countdown initialization
        const elements = {
            days: document.getElementById('days'),
            hours: document.getElementById('hours'),
            minutes: document.getElementById('minutes'),
            seconds: document.getElementById('seconds')
        };

        const countdownContainer = document.getElementById('hackathon-countdown');
        const submissionReminder = document.getElementById('submission-reminder');
        const endDate = new Date('{{ communaute.id_hackathon.date_fin|date('c') }}').getTime();

        function updateCountdown() {
            const now = new Date().getTime();
            const distance = endDate - now;

            if (distance < 0) {
                Object.values(elements).forEach(el => {
                    if (el) el.textContent = '00';
                });
                if (countdownContainer) countdownContainer.classList.add('warning');
                if (submissionReminder) submissionReminder.classList.add('show');
                return;
            }

            const days = Math.floor(distance / (1000 * 60 * 60 * 24));
            const hours = Math.floor((distance % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));
            const minutes = Math.floor((distance % (1000 * 60 * 60)) / (1000 * 60));
            const seconds = Math.floor((distance % (1000 * 60)) / 1000);

            if (elements.days) elements.days.textContent = String(days).padStart(2, '0');
            if (elements.hours) elements.hours.textContent = String(hours).padStart(2, '0');
            if (elements.minutes) elements.minutes.textContent = String(minutes).padStart(2, '0');
            if (elements.seconds) elements.seconds.textContent = String(seconds).padStart(2, '0');

            if (days === 0) {
                if (countdownContainer) countdownContainer.classList.add('warning');
                if (submissionReminder) submissionReminder.classList.add('show');
            } else {
                if (countdownContainer) countdownContainer.classList.remove('warning');
                if (submissionReminder) submissionReminder.classList.remove('show');
            }
        }

        updateCountdown();
        setInterval(updateCountdown, 1000);
    });
    
    // Setup reaction functionality
    function setupReactions() {
        debugLog('Setting up reactions functionality');
        
        // Listen for reaction button clicks on dynamically added messages
        document.getElementById('messages-container').addEventListener('click', function(e) {
            // Check if the clicked element or its parent is a reaction button
            const reactionButton = e.target.closest('.reaction-button');
            if (reactionButton) {
                const messageId = reactionButton.dataset.messageId;
                const emoji = reactionButton.dataset.emoji;
                debugLog('Reaction clicked:', { messageId, emoji });
                addReaction(messageId, emoji);
            }
        });
    }
    
    // Function to add a reaction to a message
    function addReaction(messageId, emoji) {
        const formData = new FormData();
        formData.append('emoji', emoji);
        
        fetch(`/reaction/add/${messageId}`, {
            method: 'POST',
            body: formData
        })
        .then(response => {
            if (!response.ok) {
                throw new Error('Failed to add reaction');
            }
            return response.json();
        })
        .then(data => {
            debugLog('Reaction response:', data);
            if (data.success) {
                // Update the UI to reflect the new reaction counts
                updateReactionCounts(messageId, data.counts);
                
                // Toggle active class on the button
                const button = document.querySelector(`.reaction-button[data-message-id="${messageId}"][data-emoji="${emoji}"]`);
                if (button) {
                    if (data.action === 'added') {
                        button.classList.add('active');
                    } else if (data.action === 'removed') {
                        button.classList.remove('active');
                    }
                }
            }
        })
        .catch(error => {
            debugLog('Error adding reaction:', error);
        });
    }
    
    // Function to update reaction counts in the UI
    function updateReactionCounts(messageId, counts) {
        Object.keys(counts).forEach(emoji => {
            const counter = document.querySelector(`.reaction-counter[data-message-id="${messageId}"][data-emoji="${emoji}"]`);
            if (counter) {
                const count = counts[emoji] || 0;
                counter.textContent = count > 0 ? count : '';
            }
        });
    }
    
    // Function to fetch existing reactions for a message
    function loadReactions(messageId) {
        fetch(`/reaction/get/${messageId}`)
            .then(response => {
                if (!response.ok) {
                    throw new Error('Failed to load reactions');
                }
                return response.json();
            })
            .then(data => {
                debugLog('Loaded reactions for message:', messageId, data);
                if (data.success) {
                    updateReactionCounts(messageId, data.counts);
                    
                    // Mark user's reactions as active
                    data.userReactions.forEach(emoji => {
                        const button = document.querySelector(`.reaction-button[data-message-id="${messageId}"][data-emoji="${emoji}"]`);
                        if (button) {
                            button.classList.add('active');
                        }
                    });
                }
            })
            .catch(error => {
                debugLog('Error loading reactions:', error);
            });
    }

    // Listen for clicks outside the mention container to close it
    document.addEventListener('click', function(e) {
        if (mentionActive && !mentionContainer.contains(e.target) && e.target !== messageTextarea) {
            debugLog('Click outside mention container detected');
            closeMentionContainer();
        }
    });

    document.getElementById('toggle-polls').addEventListener('click', function() {
        document.getElementById('polls-sidebar').classList.toggle('show');
    });

    document.querySelectorAll('.chat-link').forEach(link => {
        link.addEventListener('click', function(e) {
            e.preventDefault();
            const chatId = this.dataset.chatId;
            const chatName = this.dataset.chatName;
            const chatType = this.dataset.chatType;
            debugLog('Chat selected:', { chatId, chatName, chatType });
            
            // Update UI for selected chat
            document.querySelectorAll('.chat-link').forEach(el => el.classList.remove('active'));
            this.classList.add('active');
            
            // Update chat header
            document.getElementById('current-chat-name').textContent = chatName;
            
            // Store current chat ID for later use
            currentChatId = chatId;
            
            // Check if the user has permission to post in this chat
            const userRole = '{{ app.user ? app.user.roles[0] : "ROLE_USER" }}';
            const canPost = !(userRole === 'ROLE_PARTICIPANT' && (chatType === 'ANNONCES' || chatType === 'COACH'));
            
            // Show or hide input form based on permissions
            const messageForm = document.getElementById('message-form');
            if (messageForm) {
                if (canPost) {
                    messageForm.classList.remove('d-none');
                    messageForm.style.display = 'block';
                    
                    // Also clear any previous permission alerts
                    const permissionAlert = document.getElementById('permission-alert');
                    if (permissionAlert) {
                        permissionAlert.remove();
                    }
                } else {
                    messageForm.style.display = 'none';
                    // Show permission alert
                    showPermissionDeniedAlert(chatName, chatType);
                }
            }
            
            // Make sure we have community members for mentions
            fetchCommunityMembers();
            
            // Initialize/reinitialize the message form if the user can post
            if (canPost) {
                initializeMessageForm();
            }
            
            // Load chat content
            loadChatContent(chatId);
        });
    });

    function loadChatContent(chatId) {
        debugLog('Loading content for chat:', chatId);

        const messagesContainer = document.getElementById('messages-container');
        messagesContainer.innerHTML = '<p class="text-center text-muted">Loading messages...</p>';

        fetch(`/chat/${chatId}/messages`)
            .then(response => {
                debugLog('Messages fetch response status:', response.status);
                if (!response.ok) {
                    throw new Error('Network response was not ok: ' + response.statusText);
                }
                return response.json();
            })
            .then(data => {
                debugLog('Messages data:', data);
                messagesContainer.innerHTML = '';
                if (data.messages && data.messages.length > 0) {
                    data.messages.forEach(message => {
                        const isOwnMessage = message.posted_by && message.posted_by.id_user === currentUserId;
                        const isBotMessage = message.posted_by && message.posted_by.email_user === 'bot@hackify.com';
                        const messageClass = isBotMessage ? 'message-bot' : (isOwnMessage ? 'message-own' : 'message-other');
                        
                        // Get sender name and initials for avatar
                        let senderName = 'Unknown';
                        let initials = 'U';
                        let photoUrl = null;
                        
                        if (message.posted_by) {
                            if (isBotMessage) {
                                senderName = 'Bot';
                                initials = 'B';
                            } else {
                                senderName = `${message.posted_by.prenom} ${message.posted_by.nom}`;
                                initials = (message.posted_by.prenom.charAt(0) + message.posted_by.nom.charAt(0)).toUpperCase();
                                // Get photo URL if available
                                if (message.posted_by.photoUser) {
                                    photoUrl = `/uploads/profile_pictures/${message.posted_by.photoUser}`;
                                }
                            }
                        }

                        const messageElement = document.createElement('div');
                        messageElement.className = `message ${messageClass}`;
                        messageElement.dataset.messageId = message.id;
                        
                        // Generate avatar HTML
                        let avatarHTML = '';
                        if (photoUrl) {
                            // Use actual profile photo
                            avatarHTML = `
                                <div class="avatar-container" style="width:40px; height:40px; border-radius:50%; overflow:hidden;">
                                    <img src="${photoUrl}" alt="${senderName}" style="width:100%; height:100%; object-fit:cover;" onerror="this.onerror=null; this.src=''; this.parentElement.innerHTML='<div class=\'avatar-placeholder\' style=\'width:100%; height:100%; display:flex; align-items:center; justify-content:center; background-color:#6c757d; color:white; font-weight:bold; font-size:16px;\'>${initials}</div>';" />
                                </div>
                            `;
                        } else {
                            // Use initials placeholder
                            avatarHTML = `
                                <div class="avatar-container" style="width:40px; height:40px; border-radius:50%; overflow:hidden;">
                                    <div class="avatar-placeholder ${isBotMessage ? 'bot-avatar' : ''}" style="width:100%; height:100%; display:flex; align-items:center; justify-content:center; background-color:${isBotMessage ? '#0a5c36' : '#6c757d'}; color:white; font-weight:bold; font-size:16px;">
                                        ${initials}
                                    </div>
                                </div>
                            `;
                        }
                        
                        // Generate message content
                        let contentHTML = '';
                        if (isBotMessage) {
                            // Format bot content with proper styling
                            const formattedResponse = formatBotResponse(message.contenu);
                            contentHTML = `
                                <div class="message-wrapper">
                                    <div class="message-meta">
                                        <div class="message-sender">${senderName}</div>
                                    </div>
                                    <div class="message-content">
                                        <div class="bot-response-content">${formattedResponse}</div>
                                        <div class="message-time">${message.post_time}</div>
                                    </div>
                                </div>
                            `;
                        } else {
                            contentHTML = `
                                <div class="message-wrapper">
                                    <div class="message-meta">
                                        <div class="message-sender">${senderName}</div>
                                    </div>
                                    <div class="message-content">
                                        <div>${message.contenu}</div>
                                        <div class="message-time">${message.post_time}</div>
                                        <div class="message-reactions">
                                            <div class="reaction-buttons">
                                                <button class="reaction-button" data-message-id="${message.id}" data-emoji="👍">👍 <span class="reaction-counter" data-message-id="${message.id}" data-emoji="👍"></span></button>
                                                <button class="reaction-button" data-message-id="${message.id}" data-emoji="❤️">❤️ <span class="reaction-counter" data-message-id="${message.id}" data-emoji="❤️"></span></button>
                                                <button class="reaction-button" data-message-id="${message.id}" data-emoji="😂">😂 <span class="reaction-counter" data-message-id="${message.id}" data-emoji="😂"></span></button>
                                                <button class="reaction-button" data-message-id="${message.id}" data-emoji="😮">😮 <span class="reaction-counter" data-message-id="${message.id}" data-emoji="😮"></span></button>
                                                <button class="reaction-button" data-message-id="${message.id}" data-emoji="👏">👏 <span class="reaction-counter" data-message-id="${message.id}" data-emoji="👏"></span></button>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            `;
                        }
                        
                        // Set HTML content with appropriate order based on message type
                        messageElement.innerHTML = isOwnMessage 
                            ? `${contentHTML}${avatarHTML}` 
                            : `${avatarHTML}${contentHTML}`;
                            
                        messagesContainer.appendChild(messageElement);
                        
                        // Load reactions for this message
                        loadReactions(message.id);
                    });
                } else {
                    messagesContainer.innerHTML = '<p class="text-center text-muted">No messages yet.</p>';
                }
                messagesContainer.scrollTop = messagesContainer.scrollHeight;
            })
            .catch(error => {
                debugLog('Error loading messages:', error);
                messagesContainer.innerHTML = '<p class="text-center text-danger">Error loading messages: ' + error.message + '</p>';
            });

        fetch(`/chat/${chatId}/polls`)
            .then(response => {
                debugLog('Polls fetch response status:', response.status);
                if (!response.ok) {
                    throw new Error('Network response was not ok: ' + response.statusText);
                }
                return response.json();
            })
            .then(data => {
                debugLog('Polls data:', data);
                const pollsContainer = document.getElementById('polls-container');
                pollsContainer.innerHTML = '';
                if (data.polls && data.polls.length > 0) {
                    data.polls.forEach(poll => {
                        const pollElement = document.createElement('div');
                        pollElement.className = 'poll-card mb-3';
                        let optionsHtml = '';
                        poll.poll_option.forEach(option => {
                            const percentage = poll.is_closed ? ((option.vote_count / Math.max(1, poll.poll_option.reduce((sum, opt) => sum + opt.vote_count, 0))) * 100).toFixed(1) : 0;
                            optionsHtml += `
                                <div class="mb-2">
                                    <p class="mb-1">${option.text}</p>
                                    <div class="progress">
                                        <div class="progress-bar" style="width: ${percentage}%">${percentage}%</div>
                                    </div>
                                </div>
                            `;
                        });
                        pollElement.innerHTML = `
                            <div class="card-body">
                                <h6>${poll.question}</h6>
                                ${optionsHtml}
                                <span class="badge ${poll.is_closed ? 'badge-closed' : 'badge-active'}">${poll.is_closed ? 'Closed' : 'Active'}</span>
                            </div>
                        `;
                        pollsContainer.appendChild(pollElement);
                    });
                } else {
                    pollsContainer.innerHTML = '<p class="text-center text-muted">No polls available.</p>';
                }
            })
            .catch(error => {
                debugLog('Error loading polls:', error);
                pollsContainer.innerHTML = '<p class="text-center text-danger">Error loading polls: ' + error.message + '</p>';
            });
    }

    // Handle message form submission
    document.getElementById('message-form').addEventListener('submit', function(e) {
        e.preventDefault();
        
        if (!currentChatId) {
            alert('Please select a chat first.');
            return;
        }
        
        const messageInput = document.getElementById('message-input');
        const content = messageInput.value.trim();
        
        if (!content) {
            return; // Don't send empty messages
        }
        
        // Check permissions based on chat type and user role
        const chatType = document.querySelector(`.chat-link[data-chat-id="${currentChatId}"]`).dataset.chatType;
        const userRole = '{{ app.user ? app.user.roles[0] : "ROLE_USER" }}';
        
        // Participants can't post in ANNONCES or COACH chats
        if (userRole === 'ROLE_PARTICIPANT' && (chatType === 'ANNONCES' || chatType === 'COACH')) {
            const chatName = document.querySelector(`.chat-link[data-chat-id="${currentChatId}"]`).dataset.chatName;
            showPermissionDeniedAlert(chatName, chatType);
            return;
        }
        
        // Create FormData from the form to capture all fields
        const formData = new FormData(this);
        
        // Extract mentions from message
        const mentions = extractMentions(content);
        debugLog('Extracted mentions:', mentions);
        
        // Add mentions as JSON if any were found
        if (mentions.length > 0) {
            formData.append('mentions', JSON.stringify(mentions));
        }
        
        debugLog('Sending message to chat ID:', currentChatId);
        
        // Choose the correct endpoint based on chat type
        const endpoint = chatType === 'BOT_SUPPORT' 
            ? `/chat/${currentChatId}/message/gemini`
            : `/chat/${currentChatId}/message/new`;
            
        // Disable submit button during request
        const submitButton = this.querySelector('button[type="submit"]');
        const originalButtonText = submitButton.innerHTML;
        submitButton.disabled = true;
        submitButton.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Sending...';
        
        fetch(endpoint, {
            method: 'POST',
            body: formData
        })
        .then(response => {
            if (!response.ok) {
                if (response.status === 403) {
                    throw new Error('You do not have permission to post in this chat.');
                } else {
                    throw new Error(`HTTP error! status: ${response.status}`);
                }
            }
            return response.json();
        })
        .then(data => {
            debugLog('Message sent response:', data);
            if (data.success) {
                // Clear the input
                messageInput.value = '';
                
                // Reload chat to show new message
                loadChatContent(currentChatId);
            } else if (data.error) {
                throw new Error(data.error);
            }
        })
        .catch(error => {
            debugLog('Error sending message:', error);
            
            if (error.message.includes('permission')) {
                // This is a permission error
                const chatName = document.querySelector(`.chat-link[data-chat-id="${currentChatId}"]`).dataset.chatName;
                showPermissionDeniedAlert(chatName, chatType);
            } else {
                // Other errors
                alert('Error sending message: ' + error.message);
            }
        })
        .finally(() => {
            // Re-enable submit button
            submitButton.disabled = false;
            submitButton.innerHTML = originalButtonText;
        });
    });
    
    // Function to show a nice permission denied alert
    function showPermissionDeniedAlert(chatName, chatType) {
        // Create or get the alert container
        let alertContainer = document.getElementById('permission-alert');
        if (!alertContainer) {
            alertContainer = document.createElement('div');
            alertContainer.id = 'permission-alert';
            alertContainer.className = 'alert alert-danger alert-dismissible fade show';
            alertContainer.setAttribute('role', 'alert');
            
            // Insert it before the messages container
            const messagesContainer = document.getElementById('messages-container');
            messagesContainer.parentNode.insertBefore(alertContainer, messagesContainer);
        }
        
        // Set the alert content
        alertContainer.innerHTML = `
            <strong>Permission Denied!</strong> As a participant, you cannot post messages in "${chatName}" (${chatType}).
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        `;
        
        // Auto-dismiss after 5 seconds
        setTimeout(() => {
            const bsAlert = new bootstrap.Alert(alertContainer);
            bsAlert.close();
        }, 5000);
    }

    function extractMentions(content) {
        const mentions = [];
        const mentionRegex = /@([\w\s]+)/g;
        let match;
        
        while ((match = mentionRegex.exec(content)) !== null) {
            const mentionedName = match[1].trim();
            
            // Find the user ID for this name
            const mentionedUser = communityMembers.find(member => 
                member.name === mentionedName
            );
            
            if (mentionedUser) {
                mentions.push({
                    id: mentionedUser.id,
                    name: mentionedName
                });
            }
        }
        
        return mentions;
    }

    function addOption() {
        const pollOptions = document.getElementById('pollOptions');
        const optionCount = pollOptions.children.length + 1;
        const optionDiv = document.createElement('div');
        optionDiv.className = 'mb-2 option-input-group';
        optionDiv.innerHTML = `
            <div class="flex-grow-1">
                <label class="form-label">Option ${optionCount}</label>
                <input type="text" class="form-control" name="options[]" required>
            </div>
            <i class="fas fa-trash remove-option-btn" onclick="this.parentElement.remove()"></i>
        `;
        pollOptions.appendChild(optionDiv);
    }

    document.getElementById('create-poll-form').addEventListener('submit', function(e) {
        e.preventDefault();
        if (!currentChatId) {
            alert('Please select a chat first.');
            return;
        }

        const formData = new FormData(this);
        fetch(`/chat/${currentChatId}/poll/new`, {
            method: 'POST',
            body: formData
        })
        .then(response => {
            debugLog('Poll submission response status:', response.status);
            if (!response.ok) {
                throw new Error('Network response was not ok: ' + response.statusText);
            }
            return response.json();
        })
        .then(data => {
            debugLog('Poll submission data:', data);
            if (data.error) {
                alert(data.error);
                return;
            }
            bootstrap.Modal.getInstance(document.getElementById('createPollModal')).hide();
            loadChatContent(currentChatId);
        })
        .catch(error => {
            debugLog('Error creating poll:', error);
            alert('Error creating poll: ' + error.message);
        });
    });

    document.getElementById('message-search-form').addEventListener('submit', function(e) {
        e.preventDefault();
        const query = document.getElementById('search-query').value.trim();
        if (!query) return;

        const resultsContainer = document.getElementById('search-results');
        resultsContainer.innerHTML = '<div class="spinner"><div class="bounce1"></div><div class="bounce2"></div><div class="bounce3"></div></div>';
        resultsContainer.classList.add('show');

        fetch(`/community/${communauteId}/search-ajax?query=${encodeURIComponent(query)}`)
            .then(response => {
                debugLog('Search response status:', response.status);
                if (!response.ok) {
                    throw new Error('Network response was not ok: ' + response.statusText);
                }
                return response.json();
            })
            .then(data => {
                debugLog('Search data:', data);
                resultsContainer.innerHTML = '';
                if (data.success && data.results.length > 0) {
                    data.results.forEach(result => {
                        const resultElement = document.createElement('div');
                        resultElement.className = 'message-card';
                        resultElement.innerHTML = `
                            <div class="message-meta">
                                <span class="message-author">${result.posted_by ? `${result.posted_by.prenomUser} ${result.posted_by.nomUser}` : 'Bot'}</span>
                                <span class="message-date">${result.post_time}</span>
                            </div>
                            <span class="message-chat">${result.chat_id.nom}</span>
                            <p class="message-content">${result.contenu.replace(new RegExp(query, 'gi'), match => `<span class="highlight">${match}</span>`)}</p>
                            <a href="#" class="btn btn-sm btn-outline-primary view-message-btn" data-chat-id="${result.chat_id.id}">View in Chat</a>
                        `;
                        resultsContainer.appendChild(resultElement);
                    });
                } else {
                    resultsContainer.innerHTML = '<p class="text-center text-muted">No results found.</p>';
                }
            })
            .catch(error => {
                debugLog('Error searching messages:', error);
                resultsContainer.innerHTML = '<p class="text-center text-danger">Error loading search results: ' + error.message + '</p>';
            });
    });

    document.getElementById('search-results').addEventListener('click', function(e) {
        if (e.target.classList.contains('view-message-btn')) {
            e.preventDefault();
            const chatId = e.target.dataset.chatId;
            debugLog('View message in chat:', chatId);
            const chatLink = document.querySelector(`.chat-link[data-chat-id="${chatId}"]`);
            if (chatLink) {
                chatLink.click();
            } else {
                debugLog('Chat link not found for ID:', chatId);
            }
        }
    });

    // Add this function to format bot responses
    function formatBotResponse(text) {
        if (!text) return '';
        
        // Replace line breaks with HTML breaks
        let formatted = text.replace(/\n/g, '<br>');
        
        // Format titles (lines with * or # at beginning)
        formatted = formatted.replace(/^\s*(?:[*#]+)\s*(.*?)$/gm, '<strong>$1</strong>');
        
        // Format bullet points
        formatted = formatted.replace(/^\s*[-•]\s*(.*?)$/gm, '<br>• $1');
        
        // Format numbered lists
        formatted = formatted.replace(/^\s*(\d+)[\.)]\s*(.*?)$/gm, '<br>$1. $2');
        
        // Format bold text with ** or __
        formatted = formatted.replace(/\*\*(.*?)\*\*|__(.*?)__/g, '<strong>$1$2</strong>');
        
        // Format italic text with * or _
        formatted = formatted.replace(/(?<!\*)\*(?!\*)(.*?)(?<!\*)\*(?!\*)|_(.*?)_/g, '<em>$1$2</em>');
        
        // Format code blocks
        formatted = formatted.replace(/`(.*?)`/g, '<code>$1</code>');
        
        return formatted;
    }

    function renderMentionSuggestions(members) {
        debugLog('Rendering mention suggestions for members:', members);
        if (!members || members.length === 0) {
            debugLog('No members to render');
            closeMentionContainer();
            return;
        }
        
        // Make sure we have the textarea element
        if (!messageTextarea) {
            debugLog('Message textarea not found');
            return;
        }
        
        // Force the container to be visible in the DOM before positioning
        mentionContainer.style.display = 'block';
        
        // Find the position of the @ symbol in the textarea
        const cursorPosition = messageTextarea.selectionStart;
        const text = messageTextarea.value.substring(0, cursorPosition);
        const lastAtPos = text.lastIndexOf('@');
        
        if (lastAtPos === -1) {
            debugLog('@ symbol not found in text');
            closeMentionContainer();
            return;
        }
        
        // Get the text area position and cursor position for better positioning
        const textareaRect = messageTextarea.getBoundingClientRect();
        
        // Get caret position
        const caretPos = getCaretCoordinates(messageTextarea, lastAtPos);
        
        // Position the container at the @ symbol
        mentionContainer.style.position = 'absolute';
        mentionContainer.style.width = '250px';
        
        // Get the left position based on the caret
        let left = textareaRect.left + caretPos.left;
        
        // Make sure it doesn't go off-screen
        if (left + 250 > window.innerWidth) {
            left = window.innerWidth - 260;
        }
        
        // Set the position
        mentionContainer.style.left = `${left}px`;
        mentionContainer.style.top = `${textareaRect.top + caretPos.top + 25}px`;
        
        // Clear previous content
        mentionContainer.innerHTML = '';
        
        // Create a div for each member
        members.forEach((member, index) => {
            const mentionItem = document.createElement('div');
            mentionItem.className = 'mention-item';
            
            // Determine role class based on member data or default to 'participant'
            const role = member.role || 'participant';
            mentionItem.classList.add(`role-${role.toLowerCase()}`);
            
            mentionItem.dataset.id = member.id;
            mentionItem.dataset.name = member.name;
            
            // Get initials for avatar
            const name = member.name;
            const nameParts = name.split(' ');
            const initials = nameParts.length > 1 
                ? (nameParts[0].charAt(0) + nameParts[1].charAt(0)).toUpperCase()
                : name.substring(0, 2).toUpperCase();
            
            mentionItem.innerHTML = `
                <div class="mention-avatar">${initials}</div>
                <div class="mention-info">
                    <div class="mention-name">${member.name}</div>
                    <div class="mention-role">${role.toLowerCase().replace('_', ' ')}</div>
                </div>
            `;
            
            // Add highlight for first item
            if (index === 0) {
                mentionItem.classList.add('active');
                mentionSelectedIndex = 0;
            }
            
            // Add click handler
            mentionItem.addEventListener('click', () => {
                selectMention(mentionItem);
            });
            
            mentionContainer.appendChild(mentionItem);
        });
        
        // Show the container
        mentionContainer.classList.add('show');
    }
    
    // Helper function to get caret coordinates
    function getCaretCoordinates(element, position) {
        // Create a div with the same styling as the textarea
        const mirror = document.createElement('div');
        const style = window.getComputedStyle(element);
        
        mirror.style.position = 'absolute';
        mirror.style.visibility = 'hidden';
        mirror.style.overflow = 'auto';
        mirror.style.whiteSpace = 'pre-wrap';
        mirror.style.wordWrap = 'break-word';
        mirror.style.padding = style.padding;
        mirror.style.borderWidth = style.borderWidth;
        mirror.style.fontFamily = style.fontFamily;
        mirror.style.fontSize = style.fontSize;
        mirror.style.lineHeight = style.lineHeight;
        mirror.style.width = element.clientWidth + 'px';
        
        // Create content up to the caret position
        const textBeforeCaret = element.value.substring(0, position);
        
        // Replace spaces with nbsp to preserve whitespace
        mirror.textContent = textBeforeCaret.replace(/ /g, '\u00a0');
        
        // Add a span at the end to measure
        const span = document.createElement('span');
        span.textContent = '\u200b'; // Zero-width space
        mirror.appendChild(span);
        
        document.body.appendChild(mirror);
        
        const coordinates = {
            top: span.offsetTop,
            left: span.offsetLeft
        };
        
        document.body.removeChild(mirror);
        
        return coordinates;
    }

    function showMentionSuggestions(query) {
        debugLog('Showing mention suggestions with query:', query);
        
        // No members available yet, try fetching them
        if (!communityMembers || communityMembers.length === 0) {
            debugLog('No community members loaded yet, fetching...');
            fetchCommunityMembers();
            // Show all members once loaded
            setTimeout(() => {
                if (communityMembers && communityMembers.length > 0) {
                    renderMentionSuggestions(communityMembers);
                }
            }, 500);
            return;
        }
        
        // If no query or very short query, show all members
        if (!query || query.length < 1) {
            debugLog('Empty query, showing all members');
            renderMentionSuggestions(communityMembers);
            return;
        }
        
        // Filter members by query
        const lowercaseQuery = query.toLowerCase();
        const filteredMembers = communityMembers.filter(member => {
            return member.name.toLowerCase().includes(lowercaseQuery) || 
                   member.email.toLowerCase().includes(lowercaseQuery);
        });
        
        debugLog('Showing mention suggestions for:', query);
        debugLog('Filtered members:', filteredMembers);
        
        renderMentionSuggestions(filteredMembers);
    }

    function handleMentionKeydown(e) {
        // If mentions are not active, do nothing
        if (!mentionActive || mentionContainer.style.display === 'none') {
            return;
        }
        
        const mentionItems = mentionContainer.querySelectorAll('.mention-item');
        
        // Handle keyboard navigation
        switch (e.key) {
            case 'ArrowDown':
                e.preventDefault();
                // Move selection down
                if (mentionSelectedIndex < mentionItems.length - 1) {
                    // Remove active class from current item
                    if (mentionSelectedIndex >= 0) {
                        mentionItems[mentionSelectedIndex].classList.remove('active');
                    }
                    // Add active class to next item
                    mentionSelectedIndex++;
                    mentionItems[mentionSelectedIndex].classList.add('active');
                    
                    // Scroll to the item if necessary
                    const selectedItem = mentionItems[mentionSelectedIndex];
                    if (selectedItem.offsetTop + selectedItem.offsetHeight > mentionContainer.scrollTop + mentionContainer.offsetHeight) {
                        mentionContainer.scrollTop = selectedItem.offsetTop + selectedItem.offsetHeight - mentionContainer.offsetHeight;
                    }
                }
                break;
                
            case 'ArrowUp':
                e.preventDefault();
                // Move selection up
                if (mentionSelectedIndex > 0) {
                    // Remove active class from current item
                    mentionItems[mentionSelectedIndex].classList.remove('active');
                    
                    // Add active class to previous item
                    mentionSelectedIndex--;
                    mentionItems[mentionSelectedIndex].classList.add('active');
                    
                    // Scroll to the item if necessary
                    const selectedItem = mentionItems[mentionSelectedIndex];
                    if (selectedItem.offsetTop < mentionContainer.scrollTop) {
                        mentionContainer.scrollTop = selectedItem.offsetTop;
                    }
                }
                break;
                
            case 'Enter':
                e.preventDefault();
                // Select current item
                if (mentionSelectedIndex >= 0 && mentionSelectedIndex < mentionItems.length) {
                    selectMention(mentionItems[mentionSelectedIndex]);
                } else if (mentionItems.length > 0) {
                    // Select first item if none is selected
                    selectMention(mentionItems[0]);
                }
                break;
                
            case 'Escape':
                e.preventDefault();
                // Close mention container
                closeMentionContainer();
                break;
        }
    }

    function handleMentionKeyup(e) {
        // Ignore if special key (excluding @ which has keyCode 50)
        if (e.key === 'ArrowUp' || e.key === 'ArrowDown' || e.key === 'Enter' || e.key === 'Escape') {
            return;
        }
        
        const cursorPosition = this.selectionStart;
        const textBeforeCursor = this.value.substring(0, cursorPosition);
        
        // Check if we're inside a potential mention (after an @ symbol)
        const lastAtSymbol = textBeforeCursor.lastIndexOf('@');
        
        if (lastAtSymbol !== -1) {
            // Check if there's a space between the last @ and the cursor
            const textBetweenAtAndCursor = textBeforeCursor.substring(lastAtSymbol + 1);
            
            debugLog('@ detected at position:', lastAtSymbol);
            debugLog('Text after @:', textBetweenAtAndCursor);
            
            // Show mentions as long as there's no space after the @
            if (!textBetweenAtAndCursor.includes(' ')) {
                mentionActive = true;
                mentionStartIndex = lastAtSymbol;
                mentionSearchText = textBetweenAtAndCursor;
                
                // Show mention suggestions for current search text
                showMentionSuggestions(mentionSearchText);
                return;
            }
        }
        
        // If we got here, close the mention container
        if (mentionActive) {
            closeMentionContainer();
        }
    }

    function closeMentionContainer() {
        debugLog('Closing mention container');
        mentionContainer.innerHTML = '';
        mentionContainer.classList.remove('show');
        mentionContainer.style.display = 'none';
        mentionActive = false;
        mentionSearchText = '';
        mentionSelectedIndex = -1;
    }
    
    function selectMention(mentionItem) {
        debugLog('Selecting mention:', mentionItem.dataset);
        const userId = mentionItem.dataset.id;
        const userName = mentionItem.dataset.name;
        
        // Replace the @query with the selected mention
        const textBeforeMention = messageTextarea.value.substring(0, mentionStartIndex);
        const textAfterMention = messageTextarea.value.substring(messageTextarea.selectionStart);
        
        // Use data attribute to store metadata about the mention for later processing
        const newText = textBeforeMention + `@${userName} ` + textAfterMention;
        debugLog('Replacing text with:', newText);
        messageTextarea.value = newText;
        
        // Close the mention container
        closeMentionContainer();
        
        // Focus back on the textarea
        messageTextarea.focus();
    }
</script>
{% endblock %}